"""module for loading csv results generated by the MT5 testrun"""
import pandas as pd
from pathlib import PurePath, Path
import re


MOUNTED_WORKDIR = Path("/mnt/workdir")
RESULTS_DIR = "results"


def load_csv_results(path):
    """
    Load the results from a single csv file and calculates the individual
    metrics.
    """
    res = pd.read_csv(path, sep=',')
    res = __calculate_metrics_per_symbol(res)
    return res


def merge_csv_results(results_list):
    """
    merges the individual results and calculates
    the metric on the merged results
    """
    agg_dict = {"Trades": "sum",
                "HitMissStack": "sum",
                "Profit": "sum",
                }
    input_columns = __detect_input_columns_in_csv(results_list[0].columns)
    results = (
        pd.concat(results_list)
        .groupby(input_columns, sort=False)
        .agg(agg_dict)
        .reset_index()
    )
    print("res:", results)
    results = __calculate_metrics_merged(results)
    return results


def __detect_input_columns_in_csv(cols):
    """
    detect the columns with naming ...input...
    """
    return [inp for inp in cols if re.match(".*input.*", inp)]


def __calculate_metrics_merged(results):
    """
    calculate the matrics for the merged results
    updates the dataframe in place
    """

    # move the HitMiss Ratio down to normalize around 0
    # this assumes that a random indicator would achieve 0.6 HitMiss
    results["HitMiss"] = results['HitMissStack'] / (results['Trades'] / 2) - 0.6
    results["DoubleHit"] = results['Profit'] / (results['Trades'] / 2) / 200
    # results['Covered'] = False
    results.sort_values("DoubleHit", ascending=False, inplace=True)
    return results


def __calculate_metrics_per_symbol(results):
    """
    calculate calucalted metrics per symbol. These might be reused when
    calculating a metric on the merged results
    updates the dataframe in place
    """
    results["HitMissStack"] = results['Custom'] * (results['Trades'] / 2)
    return results


def construct_accessible_csv_paths_list(csv_results):
    return [MOUNTED_WORKDIR / PurePath(r.replace("\\", "/"))
            for r in csv_results]


def construct_accessible_csv_path(filename):
    return MOUNTED_WORKDIR / RESULTS_DIR / filename
